---
# number of images per split:
splits:
 train: 5
 valid: 5
 test: 1

output_dir: dataset

image_dir: ./dataset/images/{split}/
labels_dir: ./dataset/labels/{split}
labels_all_entries_file: ./dataset/labels/{split}/all_entries.txt
coco_json_labels_file_path: ./dataset/images/{split}/annotations.json

category_names_file: ./dataset/class.names

# verfication rendering of images and overlays:
split_to_render: 'train' # 'train', 'valid'. 'test' (
test_output_dir: ./runs/exp

###########################################################################
# various output labels file formats selection:
# 1. segmentation_yolov5: class-polygon labels  Format:  a .txt file per image, one row per object,
#   row format: class polygon vertices (x0, y0.....xn,yn), normalized coordinates [0 to 1].
# zero-indexed class numbers - start from 0
# 2. detection_yolov5: class-bbox labels. Format: a .txt file per image, one row per object row format:
# [classid, x_center, y_center, width, height]. Mormalized coordinates [0 to 1]. zero-based indexed class numbers.
# 3. detection_unified_textfil: coco like labels format. Dataset entries are defined by a json file
# 4. class-bbox labels text file per all images, a row per image.

labels_file_format: segmentation_yolov5 # [segmentation_yolov5, detection_yolov5, detection_coco_json_format, detection_unified_textfile]
###########################################################################
# shape dataset definitions:
shapes_config_file: ./config/shapes_config.yaml

# validate dataset by rendering : number of radomly selected images examples to render - per a split:
nrender_examples: 10
